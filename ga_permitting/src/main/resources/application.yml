### This is the main way to configure the application (other than annotations).
### This file is in Yaml format but you can also configure spring boot using the traditional
### Java properties file format. 

spring.jmx:
   enabled: false

#spring.datasource:
#    driverClassName: org.h2.Driver
#    url: jdbc:h2:mem:bootexample;MODE=MySQL

spring:
  jpa:
    database: ORACLE
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernates:
        proc.param_null_passing: true

  datasource:
    #platform: org.hibernate.dialect.Oracle12cDialect
    platform: org.hibernate.dialect.Oracle10gDialect
    url: jdbc:oracle:thin:@//RAUI1C.db.enel:1521/RAUI1C
    username: wlspool_ardesia
    password: aisedra
    driverClassName: oracle.jdbc.OracleDriver

#    MAREMT CREDENTIALS WLS
#    username: wlspool_maremt or MAREMT
#    password: tmeram

#    ARDESIA CREDENTIALS
#    username: wlspool_ardesia
#    password: aisedra

#    ATLANTE CREDENTIALS
#    username: ATLANTE
#    password: etnalta


server:
  port: 8090

#todo: make sure to always enable security in production
security:
  basic:
    enabled: false

#management endpoints on a separate port
management:
  port: 8091
  security:
    enabled: false # management port is internal only. no need to secure it.

#default project info followed by actual injected pom-specified values.
project:
  name: gapermitting
  version: 0.1
  description: boot-example default description
info:
  build:
    artifact: ${project.artifactId}
    name: ${project.name}
    description: ${project.description}
    version: ${project.version}

hotel.service:
  name: 'default profile:'
---
spring:
  profiles: test
  h2:
    console:
      enabled: true

logging:
  file: boot_example.log
 